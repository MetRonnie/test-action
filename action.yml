name: Set Python package version
description: Set and validate package version in __init__.py, and check it doesn't already exist on PyPI.org
inputs:
  version:
    description: 'PEP 440 compliant version number'
    required: true
  init-file:
    description: 'Path to __init__.py'
    required: true
  pypi-package-name:
    description: 'Name of package on PyPI.org'
    required: true
  stage-changes:
    description: 'Whether to stage the changes to __init__.py'
    required: false
    default: true
# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-id }}
runs:
  using: "composite"
  steps:
    - name: Install utils
      shell: bash
      run: |
        python3 -m pip install -q packaging
        echo "::add-path::${{ github.action_path }}/bin"

    - name: Update version in __init__.py
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
        INIT_FILE: ${{ inputs.init-file }}
      run: |
        pattern="(__version__ ?= ?['\"]).*(['\"])"
        sed -i -E "s/${pattern}/\1${VERSION}\2/" "$INIT_FILE"

        if [[ -z $(git diff --stat -- "$INIT_FILE") ]]; then
          echo "::error:: No changes to ${INIT_FILE} occurred"
          exit 1
        fi

        if ${{ inputs.stage-changes }}; then
          git add "$INIT_FILE"
        fi

    - name: Get setup.py version
      # Might differ slightly from __init__.py, e.g. if epoch prefixed
      id: get-setup-py-version
      shell: bash
      run: |
        setup_py_version=$( python setup.py --version )
        # Check version number is valid:
        cmp_py_versions "$setup_py_version" "$setup_py_version"
        echo "setup.py version: ${setup_py_version}"
        echo "::set-output name=version::$setup_py_version"

    - name: Get package info on PyPI.org
      id: get-pypi-info
      shell: bash
      env:
        PYPI_PACKAGE_NAME: ${{ inputs.pypi-package-name }}
      run: |
        cmd="curl -X GET \
          https://pypi.org/pypi/${PYPI_PACKAGE_NAME}/json \
          --silent --fail --show-error"
        response=$( $cmd )
        echo "::group::${cmd}"
        echo "$response"
        echo "::endgroup::"
        echo "::set-output name=response::$response"

    - name: Check version doesn't already exist on PyPI.org
      shell: node {0}
      env:
        SETUP_PY_VERSION: ${{ steps.get-setup-py-version.outputs.version }}
        PYPI_INFO: ${{ steps.get-pypi-info.outputs.response }}
      run: |
        const {execSync} = require('child_process')
        const {env} = process;

        const {releases} = JSON.parse(env.PYPI_INFO);
        for (release in releases) {
          const diff = execSync(`cmp_py_versions ${release} ${env.SETUP_PY_VERSION}`,
            {stdio: 'pipe', encoding: 'utf8'});
          console.log(diff);
          if (!diff) {
            throw `${env.SETUP_PY_VERSION} already exists on PyPI.org`;
          }
        }
